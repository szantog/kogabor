<?php
// $Id: flag_weights.module,v 1.1.2.6 2009/08/26 10:39:09 lyricnz Exp $

/**
 * @file
 * Add flag-weights to the Flag module.
 */

/**
 * Implementation of hook_schema_alter(). We alter $schema by reference.
 *
 * @param $schema
 *   The system-wide schema collected by drupal_get_schema().
 */
function flag_weights_schema_alter(&$schema) {
  // Add field to existing schema.
  $schema['flag_content']['fields']['weight'] = array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
    'size' => 'tiny',
    // 'description' => t('Flag weight within region.'),
  );
}

/**
 * Implementation of hook_views_data().
 *
 * Provide a field that can be used to sort a view.
 */
function flag_weights_views_data() {
  $data = array();

  $data['flag_content']['weight'] = array(
    'title' => t('Weight'),
    'help' => t('Used for sorting the list of flagged items.'),
    'real field' => 'weight',
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );

  return $data;
}

/**
 * Flag an item using the given Flag name.
 *
 * @param $flag_name
 *   The content-type for the flag, eg: node.
 * @see _flag_weights_flag()
 */
function flag_weights_set_flag($content_type, $content_id, $account = NULL, $weight = 0) {
  $handler = flag_create_handler($content_type);
  return _flag_weights_flag($handler, $content_id, $account, $weight);
}

/**
 * Flag an item using the given Flag name.
 *
 * @param $flag_name
 *   The machine-name for the flag to use, eg: bookmarks.
 * @see _flag_weights_flag()
 */
function flag_weights_set_flag_with_flag($flag_name, $content_id, $account = NULL, $weight = 0) {
  $handler = flag_get_flag($flag_name);
  return _flag_weights_flag($handler, $content_id, $account, $weight);
}

/**
 * Flags an item, and set it's weight.
 *
 * @param $handler
 *   The Flag to use
 * @param $content_id
 *   The ID of the item to flag or unflag.
 * @param $account
 *   The user on whose behalf to flag. Leave empty for the current user.
 * @param $weight
 *   A weight used for ordering the item within the flagged-items list.
 * @return
 *   FALSE if some error occured (e.g., user has no permission, flag isn't
 *   applicable to the item, etc.), TRUE otherwise.
 */
function _flag_weights_flag($handler, $content_id, $account = NULL, $weight = 0) {
  $ok = $handler->flag('flag', $content_id, $account);
  if ($ok && $weight != 0) {
    if (!isset($account)) {
      $account = $GLOBALS['user'];
    }
    flag_weights_set_weight($handler->fid, $handler->content_type, $content_id, $account->uid, $weight);
  }
  return $ok;
}

/**
 * Update the weight of an existing flagged item.
 */
function flag_weights_set_weight($fid, $content_type, $content_id, $uid, $weight) {
  db_query("UPDATE {flag_content} SET weight = %d WHERE fid = %d AND content_type = '%s' AND content_id = %d AND uid = %d",
    $weight, $fid, $content_type, $content_id, $uid);
}

/**
 * Implementing hook_draggableviews_handlers().
 *
 * Integrate with Draggable Views module.
 */
function flag_weights_draggableviews_handlers() {
  return array(
    'flag_weights' => array(
      'file' => 'draggableviews_handler_flag_weights.inc',
      'title' => t('Flag Weights'),
      'description' => t('Default implementation with Flag Weights'),
      'handler' => 'draggableviews_handler_flag_weights',
    ),
  );
}
