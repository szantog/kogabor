<?php
/**
 * @file
 *   Display suit custom fields
 *
 * @developers:
 *    Gabor Szanto <hello@szantogabor.com>
 *    http://szantogabor.com
 */

/**
 * Implementation of hook_ds_api().
 */
/*
function ds_custom_fields_ds_api() {

  return array(
    'title' => 'Gabors custom fields',
    'module' => 'ds_custom_fields',
    'object' => 'node',
    'views_base' => 'node', // can be either a string or an array.
    'types' => 'node_get_types',
    'extra' => array('has_body'),
    'plugins_exclude' => array(NODE_BUILD_RSS),
    'regions_single' => array(NODE_BUILD_RSS),
    'help' => array('Node displays help'),
    'no_new_build_modes' => TRUE, // Disable creating new build modes. Omit the key if you want it
  );
}
*/
/**
 * Implementation of hook_ds_fields().
 */

function ds_custom_fields_ds_fields($type_name, $build_mode, $extra) {

  $fields = array(
    // *** NOT USED NOW IN THIS PROJECT ***
    // @todo delete, if never will used
    'comment_links' => array(
      'title' => t('Created + add new comments + comments'),
      'type' => DS_FIELD_TYPE_THEME,
      'status' => DS_FIELD_STATUS_STATIC,
      'properties' => array(
        'formatters' => array(
          'dscf_default' => t('Default drupal'),
        //  'dscf_only_comment ' => t('Only comments'),
        //  'dscf_all' => t('Posted on + comments'),
        ),
      ),
    ),
    'edit_link' => array(
      'title' => t('Edit link'),
      'type' => DS_FIELD_TYPE_THEME,
      'status' => DS_FIELD_STATUS_STATIC,
      'properties' => array(
        'formatters' => array(
          'dscf_edit_link' => t('Default drupal'),
        //  'dscf_only_comment ' => t('Only comments'),
        //  'dscf_all' => t('Posted on + comments'),
        ),
      ),
    ),
    'gallery_main_picture' => array(
      'title' => t('Gallery main picture'),
      'type' => DS_FIELD_TYPE_THEME,
      'status' => DS_FIELD_STATUS_STATIC,
      'properties' => array(
        'formatters' => array(
          'dscf_gallery_main_picture' => t('Default'),
        ),
      ),
    ),
    'nid' => array(
      'title' => t('ID'),
      'type' => DS_FIELD_TYPE_THEME,
      'status' => DS_FIELD_STATUS_STATIC,
      'properties' => array(
        'formatters' => array(
          'dscf_nid' => t('Default'),
        ),
      ),
    ),
    'published' => array(
      'title' => t('Published'),
      'type' => DS_FIELD_TYPE_THEME,
      'status' => DS_FIELD_STATUS_STATIC,
      'properties' => array(
        'formatters' => array(
          'dscf_published' => t('Default'),
        ),
      ),
    ),
    'promoted' => array(
      'title' => t('Promoted to front page'),
      'type' => DS_FIELD_TYPE_THEME,
      'status' => DS_FIELD_STATUS_STATIC,
      'properties' => array(
        'formatters' => array(
          'dscf_promoted' => t('Default'),
        ),
      ),
    ),
    'flag_protected' => array(
      'title' => t('Protected'),
      'type' => DS_FIELD_TYPE_THEME,
      'status' => DS_FIELD_STATUS_STATIC,
      'properties' => array(
        'formatters' => array(
          'dscf_flag_protected' => t('Default'),
        ),
      ),
    ),
    'flag_sold' => array(
      'title' => t('Art sold'),
      'type' => DS_FIELD_TYPE_THEME,
      'status' => DS_FIELD_STATUS_STATIC,
      'properties' => array(
        'formatters' => array(
          'dscf_flag_sold' => t('Default'),
        ),
      ),
    ),
    'flag_new_picture' => array(
      'title' => t('New picture'),
      'type' => DS_FIELD_TYPE_THEME,
      'status' => DS_FIELD_STATUS_STATIC,
      'properties' => array(
        'formatters' => array(
          'dscf_flag_new_picture' => t('Default'),
        ),
      ),
    ),
  );
// @todo: now
//  $flags = flag_get_flags('node', $type_name);
//  foreach ($flags as $flag) {
//    $fields[$flag->name] = array(
//      'title' => $flag->title,
//      'type' => DS_FIELD_TYPE_FUNCTION,
//      'status' => DS_FIELD_STATUS_STATIC,
//      'format' => 'dscf_flag',
//      'properties' => array(
//        'formatters' => array(
//          "dscf_flagsaa" => t('Default'),
//        ),
//      ),
//    );
//  }
  //dsm(get_defined_vars());
  return array('nd' => $fields);

}


function ds_custom_fields_theme() {
  $theme_functions = array();
  $theme_functions['dscf_default'] = array(
    'arguments' => array('node' => NULL),
    'function' => 'theme_ds_custom_fields_node_links',
  );
  // *** NOT USED NOW IN THIS PROJECT ***
  // @todo delete, if never will used
  $theme_functions['dscf_edit_link'] = array(
    'arguments' => array('node' => NULL),
    'function' => 'theme_ds_custom_fields_edit_links',
  );
  $theme_functions['dscf_gallery_main_picture'] = array(
    'arguments' => array('node' => NULL),
    'function' => 'theme_gallery_main_picture',
  );
  $theme_functions['dscf_nid'] = array(
    'arguments' => array('node' => NULL),
    'function' => 'theme_ds_custom_fields_nid',
  );
  $theme_functions['dscf_published'] = array(
    'arguments' => array('node' => NULL),
    'function' => 'theme_ds_custom_fields_published',
  );
  $theme_functions['dscf_promoted'] = array(
    'arguments' => array('node' => NULL),
    'function' => 'theme_ds_custom_fields_promoted',
  );
  $theme_functions['dscf_flag_protected'] = array(
    'arguments' => array('node' => NULL),
    'function' => 'theme_ds_custom_fields_protected',
  );
  $theme_functions['dscf_flag_sold'] = array(
    'arguments' => array('node' => NULL),
    'function' => 'theme_ds_custom_fields_protected',
  );
  $theme_functions['dscf_flag_new_picture'] = array(
    'arguments' => array('node' => NULL),
    'function' => 'theme_ds_custom_fields_new_picture',
  );
//  $flags = flag_get_flags('node');
//  foreach ($flags as $flag) {
//    $theme_functions["dscf_flags_$flag->name"] = array(
//      'arguments' => array('node' => NULL, 'flag' => $flag),
//      'function' => 'theme_ds_custom_fields_flags',
//    );
//  }
//  dsm(get_defined_vars());
  return $theme_functions;
}

function theme_ds_custom_fields_edit_links($field) {
  if (node_access('update', $field['object'])) {
    return l(t('edit'), 'node/' . $field['object']->nid . '/edit');
  }
}

/*
 * Theme function to display custom comment links
 * *** NOT USED NOW IN THIS PROJECT ***
 * @todo delete, if never will used
 */
function theme_ds_custom_fields_node_links($field) {
  //dsm($field);
  return ds_custom_fields_get_node_comment_link($field['object']);
}

function theme_gallery_main_picture($field) {
  $output = views_embed_view('pictures_of_gallery', 'node_content_3', $field['object']->nid);
  return $output;
}

/*
 * Theme function to display node id.
 */
function theme_ds_custom_fields_nid($field) {
  return $field['object']->nid;
}

/*
 * Theme function to display node published state.
 */
function theme_ds_custom_fields_published($field) {
  if ($field['object']->status == 1) {
    $output = t('Yes');
  }
  else {
    $output = t('No');
  }
  return $output;
}

/*
 * Theme function to display node promoted state.
 */
function theme_ds_custom_fields_promoted($field) {
  if ($field['object']->promoted == 1) {
    $output = t('Yes');
  }
  else {
    $output = t('No');
  }
  return $output;
}

function theme_ds_custom_fields_protected($field){
  $flags = flag_get_counts('node', $field['object']->nid, $reset = TRUE) ;
  if (array_key_exists('protected', $flags)) {
    $output = t('Yes');
  }
  else {
    $output = t('No');
  }
  //dsm(get_defined_vars());
  return $output;
}

function theme_ds_custom_fields_sold($field){
  $flags = flag_get_counts('node', $field['object']->nid, $reset = TRUE) ;
  if (array_key_exists('sold', $flags)) {
    $output = t('Yes');
  }
  else {
    $output = t('No');
  }
  //dsm(get_defined_vars());
  return $output;
}

function theme_ds_custom_fields_new_picture($field){
  $flags = flag_get_counts('node', $field['object']->nid, $reset = TRUE) ;
  if (array_key_exists('new_picture', $flags)) {
    $output = t('Yes');
  }
  else {
    $output = t('No');
  }
  //dsm(get_defined_vars());
  return $output;
}

/*
 * Theme function to display node id.
 * @todo: tmp abandoned we will use this, when flags are dínamiccaly generated.
 */
//function dscf_flags($field, $flag) {
//  $flags = flag_get_counts('node', $field['object']->nid, $reset = TRUE) ;
//  if (array_key_exists($field['key'], $flags)) {
//    $output = t('Yes');
//  }
//  else {
//    $output = t('No');
//  }
//  dsm(get_defined_vars());
//  return $$output;
//}

/*
 * Theme function to display custom comment links
 * *** NOT USED NOW IN THIS PROJECT ***
 * @todo delete, if never will used
 */
function ds_custom_fields_get_node_comment_link($node) {
  if (user_access('access comments')) {
    $all = comment_num_all($node->nid);

    if ($all) {
      $text = format_plural($all, '1 comment', '@count comments');
      $path = "node/$node->nid";
      $options = array(
        'fragment' => 'comments',
      );
      //$count = theme_link($comment_count
      $count = l($text, $path, $options);
      $is_new = comment_num_new($node->nid);

      if ($is_new) {
        $text = format_plural($is_new, '1 new comment', '@count new comments');
        $path = "node/$node->nid";
        $options = array(
          'fragment' => 'new',
//          'query' => comment_new_page_count($all, $new, $node),
        );
        $new = l($text, $path, $options);
      }
    }
    if ($node->comment == COMMENT_NODE_READ_WRITE) {
      if (user_access('post comments')) {
        $text = t('Leave a comment');
        $path = "comment/reply/$node->nid";
        $options = array(
          'fragment' => 'comment-form',
        );
        $add = l($text, $path, $options);
      }
      else {
        $add = theme('comment_post_forbidden', $node);
      }
    }
  }
  $output = '<p>' . t('Posted on ') . format_date($node->created) . ' | ' . $add . ' » ' . $count . ' ' . $new . '</p>';
  //kpr(get_defined_vars());
  return $output;
}

/*
 * A sample preprocess function. This isn't used now
 */
function ds_custom_fields_preprocess_node(&$vars, $hook) {
  _nd_preprocess_node($vars, $hook);
  $node = $vars['node'];

  if ($vars['render_by_ds'] && ($vars['build_mode'] == 'sticky' || $vars['build_mode'] == 'teaser')) {
    $vars['content'] = $content;
  }
  //kpr(get_defined_vars());
}
