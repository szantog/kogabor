<?php

/**
 * @file
 *   Custom administration pages and functions for Kovács Gábor gyűjtemény site.
 *   Project:Young Element
 *
 * @developers:
 *    Gabor Szanto <hello@szantogabor.com>
 *    http://szantogabor.com
 *
 */

/**
 * Implementation of hook_boot().
 */
function kgart_admin_boot() {
  global $conf;
  $conf['i18n_variables'] = array(
    // Site name, slogan, mission, etc..
    'site_name',
    'site_slogan',
    'site_mission',
    'site_footer',
    'nodeformscols_field_placements_exhibition_default',
  );
}

/**
 * Implementation of hook_init().
 */
function kgart_admin_init() {
  global $language;
  if (user_access('administer content types') && arg(2) == 'node-type' && arg(4) == 'form' && $language != language_default()) {
    drupal_set_message(t('This form could save only on <strong>the default</strong> language! If need some fix, use _form_alter, look at kgart_admin module!'), 'warning');
  }
}

/**
 * Implementation of hook_menu().
 *
 * @return An array of menu items.
 */
function kgart_admin_menu() {
  $items = array();

  $items['content-admin/site_defaults'] = array(
    'title' => 'Site default settings',
    'description' => 'description',
    'page callback' => 'kgart_admin_page',
    //'page arguments' => array('callback_arg'),
    'access arguments' => array('create art content'),
    'file' => 'includes/kgart_admin.pages.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_form_alter().
 */
function kgart_admin_form_alter(&$form, $form_state, $form_id) {
  //dsm($form_id);
  global $language;
  if ($form_id == 'nodeformcols_configuration_form' && $language != language_default()) {
    unset($form['submit']);
  }

  if ($form['#id'] == 'node-form') {
    $type = $form['type']['#value'] ;
    $type_name = check_plain(node_get_types('name', $type));
    $node = $form['#node'];

    if ($type == 'art') {
      //we need manually short some elements.
      $form['#after_build'][] = 'kgart_admin_move_node_options';
      //We must set empty year field, therefore set the date manual
      //The year field set empty in kgart_admin_move_node_options() after_build function, then validate to prevent save 1810
      //Only need in empty node form
      if (is_null($form['nid']['#value'])) {
        $form['field_art_date'][0]['#default_value']['value'] = date('Y-m-d', strtotime('1810-01-01')) ;
        $form['field_art_date'][0]['#default_value']['value2'] = date('Y-m-d', strtotime('1810-12-31')) ;
        $form['#validate'][] = 'kgart_admin_check_year';
      }
    }

    //Add nid to node forms
    $id_field = 'field_' . $type .'_id';
    $form['show_nid'] = array (
      '#prefix' => '<div id="show-nid" class="form-item">',
      '#suffix' => '</div>',
      '#value' => '<label>' . t('@type ID', array('@type' => t($type_name))) . ': </label>' . kgart_api_inc_serial($node->{$id_field}[0]['value']),
      '#type' => 'markup',
      '#weight' => -1000,
    );
    dsm(get_defined_vars());
    //@todo This is a tmp solution to put country field via noderef to form
    //By default the fields attaced by views_attach couldn't ordered on node type manage form fields
    //When create an empty array to this form item, de nfc can save it's variable.
    if (($node->type == 'museum') && !isset($form['node_ref_subfield_node_content_1'])) {
      $form['node_ref_subfield_node_content_1'] = array();
    }

    if (($node->type == 'exhibition')) {
      $form['#validate'][] = 'kgart_admin_check_promote';
      if (!isset($form['node_ref_subfield_node_content_2'])) {
        $form['node_ref_subfield_node_content_2'] = array();
      }
    }
  }
}

/*
 * After build function for art_object_node_form
 */
function kgart_admin_move_node_options($form, &$form_state) {
  $node = $form['#node'];

  unset ($form['flag']['#sorted']);
  //Just inherit the original node options elementes, need to insert to flag fieldset
  //Then unset the original node options. The new elements in flag fieldset doesn't have #tree = TRUE, so the $form_state['values'] stay as original.

  $form['flag']['status'] = $form['options']['status'];
  $form['flag']['promote'] = $form['options']['promote'];

  $form['flag']['status']['#description'] = t('(This content appears on front)');
  $form['flag']['promote']['#description'] = t('(Deprecated if Kovács Gábor\'s collection)');

  unset ($form['options']['status']);
  unset ($form['options']['promote']);

  //Short flags
  if (isset($form['flag']['protected'])) {
    $form['flag']['protected']['#weight'] = 1;
  }
  if (isset($form['flag']['sold'])) {
    $form['flag']['sold']['#weight'] = 2;
  }
  if (isset($form['flag']['new_picture'])) {
    $form['flag']['new_picture']['#weight'] = 3;
  }
  $form['flag']['status']['#weight'] = 5;
  $form['flag']['promote']['#weight'] = 4;


  $form['field_art_date'][0]['value2']['#suffix'] = '<div class="description">' . t('does not appear on front, it\'s only used for searching') . '</div>';

  //Add separators
  $form['field_art_insurance']['#suffix'] = '<div class="separator"></div>';
  $form['field_art_purchase_note']['#suffix'] = '<div class="separator"></div>';
  $form['field_art_reproduced']['#suffix'] = '<div class="separator"></div>';
  $form['field_art_image_note']['#suffix'] = '<div class="separator"></div>';
  $form['field_art_state']['#suffix'] = '<div class="separator"></div>';
  $form['group_exhibition']['#suffix'] = '</div><div class="separator"></div>';

  //hide the translation settings field
  $form['translation']['#access'] = FALSE;

  //Hide the form options fieldset if user doesn't acces form element sticky.
  //The others are mived to flag, so it's an empty fieldset in this case.
  if($form['options']['sticky']['#access'] == FALSE) {
    $form['options']['#access'] = FALSE;
  }


  $default_image_dir = variable_get('kgart_image_path', 'images');

  foreach (element_children($form['field_art_image_path_s']) as $key) {
    $form['field_art_image_path_s'][$key]['value']['#field_prefix'] = '<div class="left">' . $default_image_dir . '/' . variable_get('kgart_image_path_s', $default_image_dir . '/s') . '/</div>';
    if(arg(1)=="add") {
	  $form['field_art_image_path_s'][$key]['value']['#field_suffix'] = '<div class="left">/ID_s.jpg</div>';
	} else {
      $form['field_art_image_path_s'][$key]['value']['#field_suffix'] = '<div class="left">/' . $node->nid . '+s.jpg</div>';
	}
  }

  foreach (element_children($form['field_art_image_path_m']) as $key) {
    $form['field_art_image_path_m'][$key]['value']['#field_prefix'] = '<div class="left">' . $default_image_dir . '/' . variable_get('kgart_image_path_m', $default_image_dir . '/m') . '/</div>';
    if(arg(1)=="add") {
	  $form['field_art_image_path_m'][$key]['value']['#field_suffix'] = '<div class="left">/ID_m.jpg</div>';
    } else {
	  $form['field_art_image_path_m'][$key]['value']['#field_suffix'] = '<div class="left">/' . $node->nid . '+m.jpg</div>';
	}
  }

  foreach (element_children($form['field_art_image_path_l']) as $key) {
    $form['field_art_image_path_l'][$key]['value']['#field_prefix'] = '<div class="left">' . $default_image_dir . '/' . variable_get('kgart_image_path_l', $default_image_dir . '/l') . '/</div>';
    if(arg(1)=="add") {
	  $form['field_art_image_path_l'][$key]['value']['#field_suffix'] = '<div class="left">/ID_l.jpg</div>';
	} else {
	  $form['field_art_image_path_l'][$key]['value']['#field_suffix'] = '<div class="left">/' . $node->nid . '+l.jpg</div>';
	}
  }

  //We must empty this field, because of customer need empty year. Therefore must custom validation to prevent save 1810 @see kgart_admin_check_year($form, &$form_state)
  $form['field_art_date'][0]['value']['year']['#options'][1810] = '';
  $form['field_art_date'][0]['value2']['year']['#options'][1810] = '';

  //This was: Empty 'To date' values will use the 'From date' values.
  unset($form['field_art_date'][0]['#fieldset_description']);

  //dsm(get_defined_vars());
  return $form;
}

/*
 * Validate function for date fields.
 * We put an empty value in field year to index 1810, it isn't valid year!
  */
function kgart_admin_check_year($form, &$form_state) {
  $date = substr($form_state['values']['field_art_date'][0]['value'], 0, 4);
  $date2 = substr($form_state['values']['field_art_date'][0]['value2'], 0, 4);
  if ($date == '1810') {
    form_set_error('field_art_date][0][value', t('Year is required.'));
  }
  if ($date2 == '1810') {
    form_set_error('field_art_date][0][value2]', t('Year is required.'));
  }
}

/*
 * Validate function for exhibiton edit form.
 * If the node is promoted to front page, the lead fields requiered in all languages.
 */
function kgart_admin_check_promote($form, &$form_state) {
  $languages = language_list();
  if ($form_state['values']['promote'] == 1 && $form_state['values']['field_exhibition_lead'][0]['value'] == '') {
    form_set_error('field_exhibition_lead][0][value', t('If content is promoted to front page, the field lead is required'));
  }
  foreach ($languages as $key => $value) {
    if ($form_state['values']['promote'] == 1 && isset($form_state['values']["field_exhibition_lead_$key"]) && $form_state["field_exhibition_lead_$key"][0]['value'] == '') {
      form_set_error("field_exhibition_lead_$key][0][value", t('If content is promoted to front page, the field Lead is required'));
    }
  }
}

function kgart_admin_views_query_alter(&$view, &$query) {
  global $language;

  if ( arg(0) == 'node' &&
       ( (is_numeric(arg(1)) && arg(2) == 'edit') ||
         (arg(1) == 'add') )
      && ( $view->name == 'museumlist' || $view->name == 'citylist') ) {

    $node = node_load(arg(1));
    if (!empty($node->language)) {
      $lang = $node->language;
    } else if (arg(1)=='add' && !empty($_GET['language']))  {
      $lang = $_GET['language'];
    } else {
      $lang = $language->language; //default user lang
    }

      $query->where[0]['clauses'][] = 'node.language = \'%s\'';
      $query->where[0]['args'][] = $lang;
  }
}
