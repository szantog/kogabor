<?php

/**
 * kgart_id.module
 * Project:Young Elements
 * This module is used to create custom id's specified by content types
 * The id generating method is three character abbrevation of content type name + $node->nid based 6 digit count
 * Like: art-000001
 *
 * @author
 *    Gabor Szanto <http://drupal.org/user/610310>
 */

define('ART_PRE', '');
define('ARTIST_PRE', 'ARS-');
define('CITY_PRE', 'CTY-');
define('COLLECTION_PRE', 'COL-');
define('COUNTRY_PRE', 'CNT-');
define('EXHIBITION_PRE', 'EXH-');
define('SMARTGALLERY_PRE', 'SGL-');
define('GALLERY_PRE', 'GAL-');
define('MATERIAL_PRE', 'MAT-');
define('MUSEUM_PRE', 'MUS-');
define('OWNER_PRE', 'OWN-');
define('PICTURE_PRE', 'PIC-');
define('PROGRESS_PRE', 'PRG-');
define('SIGN_PRE', 'SGN-');
define('STORAGE_PRE', 'STP-');
define('TECHNIQUE_PRE', 'TEC-');
define('FP_SLIDESHOW_PRE', 'FPS-');

define('ART_TRIM', 6);
define('ARTIST_TRIM', 3);
define('CITY_TRIM', 3);
define('COLLECTION_TRIM', 3);
define('COUNTRY_TRIM', 3);
define('EXHIBITION_TRIM', 3);
define('SMARTGALLERY_TRIM', 3);
define('GALLERY_TRIM', 3);
define('MATERIAL_TRIM', 3);
define('MUSEUM_TRIM', 3);
define('OWNER_TRIM', 3);
define('PICTURE_TRIM', 3);
define('PROGRESS_TRIM', 3);
define('SIGN_TRIM', 3);
define('STORAGE_TRIM', 3);
define('TECHNIQUE_TRIM', 3);
define('FP_SLIDESHOW_TRIM', 3);

/*
 * The main function of this module, this is used automatic in field_id computed field
 */
function computed_field_field_id_compute($node, $field, &$node_field) {
  $node_field[0]['value'] = kgart_id_generate_id($node);
}

/*
 * We need special ID field for nodetype art, only 6 digit autoinc number
 */
function computed_field_field_art_id_compute($node, $field, &$node_field) {
  $node_field[0]['value'] = kgart_id_inc_serial($node->field_art_serial[0]['value']);
}

/*
 * Helper function to get defined constant value per node type.
 *
 * @param string $type The node type
 * @return array('pre', 'trim')
 *   The constants value
 */
function kgart_id_get_constant($type) {
  switch($type) {
    case 'art':
      return array('pre' => ART_PRE, 'trim' => ART_TRIM);
      break;
    case 'artist':
      return array('pre' => ARTIST_PRE, 'trim' => ARTIST_TRIM);
      break;
    case 'city':
      return array('pre' => CITY_PRE, 'trim' => CITY_TRIM);
      break;
    case 'collection':
      return array('pre' => COLLECTION_PRE, 'trim' => COLLECTION_TRIM);
      break;
    case 'city':
      return array('pre' => CITY_PRE, 'trim' => CITY_TRIM);
      break;
    case 'country':
      return array('pre' => COUNTRY_PRE, 'trim' => COUNTRY_TRIM);
      break;
    case 'exhibition':
      return array('pre' => EXHIBITION_PRE, 'trim' => EXHIBITION_TRIM);
      break;
    case 'smartgallery':
      return array('pre' => SMARTGALLERY_PRE, 'trim' => SMARTGALLERY_TRIM);
      break;
    case 'gallery':
      return array('pre' => GALLERY_PRE, 'trim' => GALLERY_TRIM);
      break;
    case 'material':
      return array('pre' => MATERIAL_PRE, 'trim' => MATERIAL_TRIM);
      break;
    case 'museum':
      return array('pre' => MUSEUM_PRE, 'trim' => MUSEUM_TRIM);
      break;
    case 'owner':
      return array('pre' => OWNER_PRE, 'trim' => OWNER_TRIM);
      break;
    case 'picture':
      return array('pre' => PICTURE_PRE, 'trim' => PICTURE_TRIM);
      break;
    case 'progress':
      return array('pre' => PROGRESS_PRE, 'trim' => PROGRESS_TRIM);
      break;
    case 'sign':
      return array('pre' => SIGN_PRE, 'trim' => SIGN_TRIM);
      break;
    case 'storage':
      return array('pre' => STORAGE_PRE, 'trim' => STORAGE_TRIM);
      break;
    case 'technique':
      return array('pre' => TECHNIQUE_PRE, 'trim' => TECHNIQUE_TRIM);
      break;
    case 'fp_slideshow':
      return array('pre' => FP_SLIDESHOW_PRE, 'trim' => FP_SLIDESHOW_TRIM);
      break;
    default:
      break;
  }
}

/*
 * Generate ID based on node's traslation nid and defined constants
 *
 * @return string
 *   The generated id
 */
function kgart_id_generate_id($node) {
  $constants = kgart_id_get_constant($node->type);
  $nid = kgart_id_get_tnid($node->nid) ;
  $id = $constants['pre'] . kgart_id_inc_serial($nid, $constants['trim']);
  return $id;
}

/*
 * String function to complete a number with zeros
 *
 * @param $value
 *   The input string
 * @return string
 *   The 6 letters string like 000215
 */
function kgart_id_inc_serial($value, $number = 6) {
  while (strlen($value) < $number) {
    $value = '0' . $value;
  }
  return $value;
}

/*
 * Helper function to get a node's translation nid
 *
 * @param $nid
 *   The node ID
 * @return integer
 *   The node's translation nid if exist, else the original $nid
 */
function kgart_id_get_tnid($nid) {
  $query = "SELECT n.nid, n.tnid FROM {node} n WHERE n.nid = %d";
  $result = db_query($query, $nid);
  while ($row = db_fetch_array($result)) {
    $results[$row['nid']] = $row['tnid'];
  }
  if ($results[$nid]) {
    return $results[$nid];
  }
  else {
    return $nid;
  }
}